import os

import streamlit as st
import torch
from dotenv import load_dotenv

from src.llm import chat
from src.retrievers import RetrievePipeline

# --- –®–ê–ì 1: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∏—Ä–æ–∫–∏–π –º–∞–∫–µ—Ç ---
# –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π Streamlit
st.set_page_config(layout="wide")
# ---------------------------------------

os.environ["KMP_DUPLICATE_LIB_OK"] = "True"

device = torch.device(
    "cuda"
    if torch.cuda.is_available()
    else "mps" if torch.backends.mps.is_available() else "cpu"
)

load_dotenv(override=True)


@st.cache_resource
def init_retrieve_pipeline(device: str) -> RetrievePipeline:
    return RetrievePipeline(device=device)


retrieve_pipe = init_retrieve_pipeline(device)


def initialize_session_states() -> None:
    if "messages" not in st.session_state:
        st.session_state["messages"] = []


def sidebar_strategy_selector() -> str:
    st.sidebar.header("–í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    strategies = ["SummaryEmb", "ColQwen", "ColQwen+SummaryEmb"]
    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_index = strategies.index("ColQwen+SummaryEmb") if "ColQwen+SummaryEmb" in strategies else 0
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º selectbox —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞:",
        strategies,
        index=default_index # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "ColQwen+SummaryEmb" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    )


def display_chat_history() -> None:
    for message in st.session_state["messages"]:
        role = message["role"]
        content = message["content"]
        with st.chat_message(role):
            if role == "user":
                st.markdown(content)
            else:
                answer_text, image_paths = content
                if image_paths: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    st.markdown("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É:")
                    # --- –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ (1 —Ä—è–¥) ---
                    num_images = len(image_paths)
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–æ–∫, —Å–∫–æ–ª—å–∫–æ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    cols = st.columns(num_images)
                    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å–≤–æ–µ–π –∫–æ–ª–æ–Ω–∫–µ
                    for i, path in enumerate(image_paths):
                        with cols[i]:
                            st.image(
                                path,
                                caption=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}", # –ü—Ä–æ—Å—Ç–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è
                                use_container_width=True,
                            )
                    # --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
                st.markdown("**–û—Ç–≤–µ—Ç:**\n" + answer_text.lstrip())


def handle_user_query(query: str, strategy: str) -> None:
    st.session_state["messages"].append({"role": "user", "content": query})
    with st.chat_message("user"):
         st.markdown(query)

    with st.status("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...", expanded=False) as status:
        status.update(label="–≠—Ç–∞–ø 1/2: –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        image_paths = retrieve_pipe.retrieve(query, strategy)
        # st.write(f"–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_paths)}")

        status.update(label="–≠—Ç–∞–ø 2/2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º...")
        structured_query = [{"role": "user", "content": [{"type": "text", "text": query}]}]
        # –ü–µ—Ä–µ–¥–∞–µ–º image_paths –≤ chat, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ None
        answer_text = chat(structured_query, image_paths if image_paths else None)

        status.update(label="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", state="complete", expanded=False)

    st.session_state["messages"].append(
        {"role": "assistant", "content": (answer_text, image_paths)}
    )
    with st.chat_message("assistant"):
        if image_paths: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            st.markdown("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É:")
            # --- –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (1 —Ä—è–¥) ---
            num_images = len(image_paths)
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–æ–∫, —Å–∫–æ–ª—å–∫–æ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            cols = st.columns(num_images)
             # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å–≤–æ–µ–π –∫–æ–ª–æ–Ω–∫–µ
            for i, path in enumerate(image_paths):
                 with cols[i]:
                    st.image(
                        path,
                        caption=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}", # –ü—Ä–æ—Å—Ç–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è
                        use_container_width=True,
                    )
            # --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
        st.markdown("**–û—Ç–≤–µ—Ç:**\n" + answer_text.lstrip())


def main():
    # --- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ ---
    st.title("–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ ü§ñ")
    # -----------------------------------

    initialize_session_states()

    # --- –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ---
    # st.sidebar.divider()
    # -------------------------
    clear_chat_button = st.sidebar.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞")
    if clear_chat_button:
        st.session_state.messages = []
        st.rerun()

    strategy = sidebar_strategy_selector()

    display_chat_history()

    user_query = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")

    if user_query:
        handle_user_query(user_query, strategy)
        st.rerun()


if __name__ == "__main__":
    main()
